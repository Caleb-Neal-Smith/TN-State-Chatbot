version: '3.8'

services:
  admin-ui:
    build:
      context: ./admin-services
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/rag_admin
      - ORCHESTRATION_SERVICE_URL=http://orchestration-service:9000
      - DOCUMENT_STORAGE_PATH=/app/storage/documents
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
      - DASHBOARD_URL=http://kibana:5601/app/dashboards
      - LOGS_URL=http://kibana:5601/app/discover
    volumes:
      - document_storage:/app/storage/documents
    depends_on:
      - postgres
      - orchestration-service
    networks:
      - rag-network

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=rag_admin
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - rag-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prisma Migration Service
  prisma-migrate:
    build:
      context: ./admin-services
      dockerfile: Dockerfile.prisma
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/rag_admin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - rag-network


  orchestration-service:
    build: ./orchestration-service
    ports:
      - "9000:9000"
    environment:
      - OLLAMA_API_URL=http://ollama-api-server:8000
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_INDEX=rag-interactions
      - CACHE_URL=http://redis:6379
      - PORT=9000
    restart: unless-stopped
    networks:
      - rag-network
    depends_on:
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_started
      
  ollama-api-server:
    build: ./ollama-api-server
    ports:
      - "8000:8000"
    environment:
      - OLLAMA_INSTANCES=http://host.docker.internal:11434
      - LOAD_BALANCING_STRATEGY=least_connections
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 20

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.4
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - rag-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"\\|\"status\":\"yellow\"'"]
      interval: 10s
      timeout: 10s
      retries: 120
      
  kibana:
    image: docker.elastic.co/kibana/kibana:8.17.4
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - XPACK_SECURITY_ENABLED=false
    networks:
      - rag-network
    depends_on:
      elasticsearch:
        condition: service_healthy
      
  redis:
    image: redis:7
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

networks:
  rag-network:
    driver: bridge

volumes:
  postgres_data:
  document_storage:
  redis_data:
  elasticsearch_data:

