// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  username   String   @unique
  email      String   @unique
  password   String
  role       String   @default("user")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  configs    SystemConfig[]
  models     RagModel[]
  sources    DocumentSource[]
  queries    Query[]

  @@map("users")
}

model SystemConfig {
  id          String   @id @default(uuid())
  configKey   String   @map("config_key")
  configValue Json     @map("config_value")
  description String?
  createdBy   String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [createdBy], references: [id])

  @@map("system_config")
}

model RagModel {
  id          String   @id @default(uuid())
  modelName   String   @map("model_name")
  modelVersion String  @map("model_version")
  modelConfig Json     @map("model_config")
  isActive    Boolean  @default(true) @map("is_active")
  createdBy   String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [createdBy], references: [id])
  queries     Query[]

  @@map("rag_models")
}

model DocumentSource {
  id          String   @id @default(uuid())
  sourceName  String   @map("source_name")
  sourceType  String   @map("source_type")
  sourceConfig Json    @map("source_config")
  isActive    Boolean  @default(true) @map("is_active")
  createdBy   String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [createdBy], references: [id])
  embeddingId String?  @map("embedding_id")
  embedding   EmbeddingsConfig? @relation(fields: [embeddingId], references: [id])

  @@map("document_sources")
}

model Query {
  id           String   @id @default(uuid())
  queryText    String   @map("query_text")
  contextUsed  Json?    @map("context_used")
  response     Json?
  responseTime Float?   @map("response_time")
  userId       String   @map("user_id")
  modelId      String   @map("model_id")
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation(fields: [userId], references: [id])
  model        RagModel @relation(fields: [modelId], references: [id])

  @@map("queries")
}

model SystemMetric {
  id          String   @id @default(uuid())
  metricName  String   @map("metric_name")
  metricType  String   @map("metric_type")
  metricValue Float    @map("metric_value")
  dimension   String?
  collectedAt DateTime @default(now()) @map("collected_at")

  @@map("system_metrics")
}

model OllamaInstance {
  id             String   @id @default(uuid())
  instanceName   String   @map("instance_name")
  hostAddress    String   @map("host_address")
  port           Int
  instanceMetrics Json?    @map("instance_metrics")
  isActive       Boolean  @default(true) @map("is_active")
  lastHeartbeat  DateTime? @map("last_heartbeat")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  resourceUsage  ResourceUsage[]

  @@map("ollama_instances")
}

model ResourceUsage {
  id             String   @id @default(uuid())
  instanceId     String   @map("instance_id")
  cpuUsage       Float    @map("cpu_usage")
  memoryUsage    Float    @map("memory_usage")
  gpuUsage       Float?   @map("gpu_usage")
  activeRequests Int      @default(0) @map("active_requests")
  collectedAt    DateTime @default(now()) @map("collected_at")
  instance       OllamaInstance @relation(fields: [instanceId], references: [id])

  @@map("resource_usage")
}

model SystemLog {
  id        String   @id @default(uuid())
  logLevel  String   @map("log_level")
  component String
  message   String
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")

  @@map("system_logs")
}

model EmbeddingsConfig {
  id               String   @id @default(uuid())
  modelName        String   @map("model_name")
  vectorDimensions Int      @map("vector_dimensions")
  embeddingType    String   @map("embedding_type")
  configParams     Json     @map("config_params")
  createdBy        String   @map("created_by")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  user             User     @relation(fields: [createdBy], references: [id])
  documentSources  DocumentSource[]

  @@map("embeddings_config")
}